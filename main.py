import os
import sys
import binascii
import random

def print_usage():
    print('Usage: adversarial_malware_obfuscator.py TARGET ITERATIONS')
    print()
    print('TARGET: An EXE that will be obfuscated. Other formats are not tested.')
    print('ITERATIONS: Valid values 1 - 80. The higher the number of iterations the larger the file gets and the level of obfuscation should become better.')

def obfuscate_file(filename, iterations):

    def read_file(filename, bytes_to_skip):

        bytes_to_append = []
        with open(filename, 'rb') as fd:
            fd.seek(bytes_to_skip)
            i = 0
            byte = fd.read(1)
            while i <= 400:
                bytes_to_append.append(byte)
                byte = fd.read(1)
                i = i + 1
            fd.close()

        return bytes_to_append

    def append_bytes_to_file(filename, bytes_to_append=None):

        if bytes_to_append == None:
            bytes_to_append = [binascii.hexlify(os.urandom(1)) for i in range(2048)]

        with open(filename, 'ab') as fd:
            for i in range(len(bytes_to_append)):
                fd.write(bytes_to_append[i])
            fd.close()

    for i in range(iterations):
        bytes_to_skip = random.randint(1, 1024)
        bytes_to_append = read_file(filename, bytes_to_skip)
        append_bytes_to_file(filename, bytes_to_append)

    print('File modified')

def main():
    if len(sys.argv) != 3 or int(sys.argv[2]) not in range(1, 80):
        print_usage()
        sys.exit()

    target = sys.argv[1]
    iterations = int(sys.argv[2])

    obfuscate_file(target, iterations)

if __name__ == '__main__':
        main()